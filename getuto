#!/bin/bash

# This bash script maintains /etc/portage/gnupg in a Gentoo installation.
# It should be run as root always before downloading and installing binary
# packages.

# If the directory does not exist yet, it will be set up such that
# the Gentoo Release Engineering keys are trusted for signing binary
# packages.
# The keys are taken from sec-keys/openpgp-keys-gentoo-release.
# If the directory already exists, then all keys in it will be refreshed
# from keyservers.
# In addition sanity checks and corrections are performed ...

# Runtime requirements:
# app-crypt/gnupg
# sec-keys/openpgp-keys-gentoo-release

[[ $(whoami) == 'root' ]] || { echo "${0} must be run as root!" ; exit 100 ; }

mykeyserver="hkps://keys.openpgp.org"

export GNUPGHOME="${ROOT%/}"/etc/portage/gnupg

gpgconf --kill gpg-agent

if [[ ! -d ${GNUPGHOME} ]] ; then

	# The directory does not exist yet.
	mkdir -p ${GNUPGHOME}
	chmod u=rwx,go=rx ${GNUPGHOME}

	# Generate a local ultimate trust anchor key.

	PASS="$(openssl rand -base64 32)"

	KEY_CONFIG_FILE="$(mktemp)"
	chmod 600 "${KEY_CONFIG_FILE}"

	cat > "${KEY_CONFIG_FILE}" <<EOF
%echo Generating Portage local OpenPGP trust key
Key-Type: default
Subkey-Type: default
Name-Real: Portage Local Trust Key
Name-Comment: local signing only
Name-Email: portage@localhost
Expire-Date: 0
Passphrase: ${PASS}
%commit
%echo done
EOF

	gpg --no-permission-warning --batch --generate-key "${KEY_CONFIG_FILE}"
	rm -f "${KEY_CONFIG_FILE}"

	touch "${GNUPGHOME}/pass"
	chmod 600 "${GNUPGHOME}/pass"
	echo "${PASS}" > "${GNUPGHOME}/pass"

	gpg --no-permission-warning --batch --list-secret-keys --with-colons | grep '^sec' | sed -e 's/^sec:.:[0-9]*:[0-9]*://g' -e 's/:.*$//g' > "${GNUPGHOME}/mykeyid"
	mykeyid=$(<"${GNUPGHOME}/mykeyid")

	# Import all release engineering keys.

	if [[ ! -f "${ROOT%/}"/usr/share/openpgp-keys/gentoo-release.asc ]] ; then
		echo "\"${ROOT%/}\"/usr/share/openpgp-keys/gentoo-release.asc not found. Is sec-keys/openpgp-keys-gentoo-release installed?"
		exit 1
	fi

	gpg --no-permission-warning --batch --import "${ROOT%/}"/usr/share/openpgp-keys/gentoo-release.asc

	# List all release engineering keys.

	myrelkeys=$(gpg --no-permission-warning --batch --list-keys --with-colons | grep ^pub | sed -e 's/^pub:.:[0-9]*:[0-9]*://g' -e 's/:.*$//g' | grep -v ${mykeyid})

	# Locally sign all release engineering keys.

	for relkeyid in ${myrelkeys} ; do

		gpg --no-permission-warning --batch --keyserver "${mykeyserver}" --recv-keys "${relkeyid}"
		gpg --no-permission-warning --batch --yes --pinentry-mode loopback --passphrase "${PASS}" --lsign-key "${relkeyid}"

	done

	# Update the trustdb

	gpg --no-permission-warning --batch --check-trustdb

	# Make sure the trustdb is world-readable.

	chmod ugo+r "${GNUPGHOME}/trustdb.gpg"

fi

# Refresh all keys from the keyserver.

gpg --no-permission-warning --batch --keyserver "${mykeyserver}" --refresh-keys

# Make sure the trustdb is world-readable (again).

chmod ugo+r "${GNUPGHOME}/trustdb.gpg"
